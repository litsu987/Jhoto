-- Ejercicio 1: --

CREATE OR REPLACE FUNCTION F_buscar_empleat_Navio_Aleix(
    p_nom employees.first_name%TYPE,
    p_cognom employees.last_name%TYPE
) RETURN employees%ROWTYPE IS
    v_employee employees%ROWTYPE;
    CURSOR c_employee IS
        SELECT *
        FROM employees
        WHERE first_name = NVL(p_nom, first_name)
        AND last_name = NVL(p_cognom, last_name)
        ORDER BY last_name, first_name;
BEGIN
    OPEN c_employee;
    FETCH c_employee INTO v_employee;
    IF c_employee%NOTFOUND THEN
        v_employee := NULL;
    END IF;
    CLOSE c_employee;
    RETURN v_employee;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;
/
SET SERVEROUTPUT ON;
DECLARE
    v_employee employees%ROWTYPE;
BEGIN
    v_employee := F_buscar_empleat_Navio_Aleix('Kelly', 'Chung');
    IF v_employee.employee_id IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE(v_employee.first_name || ' ' || v_employee.last_name);
    ELSE
        DBMS_OUTPUT.PUT_LINE('No hay empleados con este nombre.');
    END IF;
END;
/

-- Ejercicio 2: --

CREATE OR REPLACE FUNCTION F_salari_total_dep_Navio_Aleix (p_dep_id IN NUMBER) 
RETURN NUMBER IS
  v_salary employees.salary%TYPE;
  v_total_salary NUMBER := 0;
  CURSOR c_emp_salary IS
    SELECT salary
    FROM employees
    WHERE department_id = p_dep_id;
BEGIN
  OPEN c_emp_salary;
  LOOP
    FETCH c_emp_salary INTO v_salary;
    EXIT WHEN c_emp_salary%NOTFOUND;
    v_total_salary := v_total_salary + v_salary;
  END LOOP;
  CLOSE c_emp_salary;
  RETURN v_total_salary;
END;
/
DECLARE
  v_total_salary NUMBER;
BEGIN
  v_total_salary := F_salari_total_dep_Navio_Aleix(30);
  DBMS_OUTPUT.PUT_LINE('Total salary for department 30: ' || v_total_salary);
END;
/
-- Ejercicio 3: --
DECLARE
  CURSOR TREBALLADORS IS
    SELECT *
    FROM EMPLOYEES
    ORDER BY SALARY ASC, LAST_NAME ASC;
  V_LIMIT NUMBER(6) := 200000;
  V_ACUMULAT NUMBER(6) := 0;
BEGIN
  FOR TRE IN TREBALLADORS LOOP
    IF V_ACUMULAT + TRE.SALARY <= V_LIMIT THEN
      V_ACUMULAT := V_ACUMULAT + TRE.SALARY;
      DBMS_OUTPUT.PUT_LINE(
        RPAD(TRE.FIRST_NAME || ',' || TRE.LAST_NAME, 30) || ' ' ||
        'sou:' || TO_CHAR(TRE.SALARY, '999G999') || ' ' ||
        'acumulat:' || TO_CHAR(V_ACUMULAT, '999G999')
      );
    ELSE
      EXIT;
    END IF;
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLCODE || ' - ' || SQLERRM);
END;
/

-- Ejercicio 4: --

DECLARE 
   v_hire_date DATE := TO_DATE('01-01-2000', 'DD-MM-YYYY');
BEGIN 
   FOR emp IN (
      SELECT hire_date, last_name, first_name, job_title 
      FROM employees 
      JOIN jobs ON employees.job_id = jobs.job_id 
      WHERE department_id = 30 AND hire_date > v_hire_date 
      ORDER BY hire_date, last_name
   ) 
   LOOP 
      dbms_output.put_line(
         RPAD('Fecha de contrataci√≥n: ' || TO_CHAR(emp.hire_date, 'DD/MM/YYYY'), 35) || 
         RPAD('Apellido: ' || emp.last_name, 25) || 
         RPAD('Nombre: ' || emp.first_name, 20) || 
         'Cargo: ' || emp.job_title
      ); 
   END LOOP; 
END;
/

-- Ejercicio 5: --


DECLARE
   CURSOR c_managers IS
      SELECT employee_id, salary, (SELECT COUNT(*) FROM employees WHERE manager_id = e.employee_id) AS num_employees
      FROM employees e
      WHERE job_id LIKE '%MAN%' 
      FOR UPDATE OF salary;
   v_increment NUMBER := 0;
BEGIN
    FOR r_manager IN c_managers LOOP
      IF r_manager.num_employees <= 5 THEN
         v_increment := 100;
      ELSE
         v_increment := 85;
      END IF;
      
      UPDATE employees 
      SET salary = salary + (v_increment * r_manager.num_employees) 
      WHERE employee_id = r_manager.employee_id;
   END LOOP;
   
   COMMIT;
END;
