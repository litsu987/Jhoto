Name       = Modern Quest System + UI
Version    = 1.1.0
Essentials = 21.1
Website    = https://reliccastle.com/resources/709/
Credits    = ThatWelshOne_,mej71,derFischae,Marin,dpertierra,Turi

#===============================================================================
# Créditos más detallados
#===============================================================================
# mej71 - El sistema de misiones subyacente utiliza gran parte del script del sistema de misiones original de mej71 para versiones anteriores de Pokémon Essentials (https://reliccastle.com/resources/80/)
# derFischae - Actualización del script del sistema de misiones de mej71 para v17.2 y v18/18.1. (https://www.pokecommunity.com/showthread.php?t=429037)
# Marin - Me inspiré para algunos de los componentes de la interfaz de usuario en Easy Questing Interface de Marin (https://reliccastle.com/resources/62/)
# ThatWelshOne_ - Actualizar y reelaborar la entrada de datos de la misión y la interfaz de usuario
# dpertierra - Actualización del script del sistema de misiones para v21.1
# Turi - Traducción y adaptacíon al español
# 
#===============================================================================
# Instalación
#===============================================================================
# 1. Extrae el contenido de esta descarga en la carpeta principal del proyecto (donde está Game.exe).
# 2. Permite que las carpetas Audio, Graphics y Plugins de esta descarga se fusionen las carpetas ya existentes.
# 3. Compila tu juego. Sabrás que los plugins se han compilado correctamente si aparece "Compiling plugin scripts... done" (v19 y v19.1) y el nombre de este plugin en la ventana de la consola de depuración (solo v19.1).
# Si no aparece este mensaje, prueba a eliminar PluginScripts.rxdata de la carpeta de Datos antes de volver a intentarlo.
# 4. DEBES iniciar un nuevo archivo guardado.
# ¡Deberías haber instalado con éxito el sistema de misiones!
# 
#===============================================================================
# Cómo usar
#===============================================================================
# Hay cuatro métodos con los que te familiarizarás mucho:
# 1. activateQuest(quest) - para activar una misión y agregarla al registro de misiones
# 2. advanceQuestToStage(quest, stageNumber) - para avanzar una misión a la etapa dada (para misiones con más de una etapa)
# 3. completeQuest(quest) - para marcar una misión como completa
# 4. failQuest(quest) - para marcar una misión como fallida
# 
# El argumento de la misión debe ser el nombre simbólico de la misión relevante definida en el módulo QuestModule (más sobre esto en la siguiente sección).
# Por ejemplo, si los datos de tu misión se indican como "Mision1", entonces el argumento de la misión proporcionado a estos cuatro métodos debería ser: Mision1. <-- sin incluir ese punto al final
# Recibirás un error si olvidas los dos puntos iniciales o si la misión dada no existe.
# 
# El argumento stageNumber debe ser un número que represente el progreso hacia la finalización de una misión. Esto sólo es necesario para el método advancedQuestToStage.
# Las etapas no necesitan ser lineales. Puedes avanzar una misión de la etapa 1 a la 3 y luego volver a la 2, si así lo deseas. Incluso puedes avanzar una misión a la misma etapa, ¡así que ten cuidado!
# Por último, este script no controla cuándo se activa una misión, cuándo avanza a una nueva etapa, cuándo se completa o falla; sólo otorga los métodos para ello.
# 
# Más allá de lo descrito anteriormente, los cuatro métodos tienen algunos parámetros opcionales que puedes especificar para alterar la apariencia de la interfaz de usuario:
# 1. activateQuest(quest, color, story)
# 2. advanceQuestToStage(quest, stageNum, color, story)
# 3. completeQuest(quest, color, story)
# 4. failQuest(quest, color, story)
# 
# Aquí, el color refleja el color del nombre de la misión tal como aparece en la interfaz de usuario.
# Debe ser una combinación de dos códigos de color RGB hexadecimales de 15 bits del formato XXXXyyyy, XXXX para el color base y yyyy para el color de sombra.
# Este es un sitio web útil para convertir entre códigos de color hexadecimales y códigos de color hexadecimales de 15 bits: http://www.budmelvin.es/dev/15bitconverter.html
# En 001_Quest_Config.rb hay un método de utilidad llamado colorQuest(color) al que puedes agregar tus nuevos colores.
# Aquí está la lista de colores que ya están definidos:
# azul
# rojo
# verde
# cian
# magenta
# amarillo
# gris
# blanco
# morado
# naranja
# El color predeterminado es el color gris oscuro, como se ve cuando se usa un comando Show Text en cualquier caso.
# DEBES poner comillas alrededor de estos colores al llamar a colorQuest(color), por ejemplo colorQuest("rojo").
#
# Finalmente, el parámetro "story" debe ser falso (predeterminada) o verdadero. Establecerlo en verdadero hace que el nombre de la misión en la interfaz de usuario aparezca en negrita.
# Esta opción existe como una forma de diferenciar ciertas misiones en la interfaz de usuario. No tienes por qué usarlo.
#
# Poniendo todo esto junto, puedes activar una misión y hacer que su nombre aparezca en color morado y en negrita en la interfaz de usuario de esta manera:
# activateQuest(quest, colorQuest("morado"), true)
# Una nota final sobre los colores: puedes cambiar el color del texto cada vez que una misión avanza/completa/falla si quieres que las misiones completadas tengan un color diferente, por ejemplo.
# De forma predeterminada, el color del texto se heredará de la llamada activateeQuest original.
# 
#===============================================================================
# Entrada de datos de misión
#===============================================================================
# Debes abrir y editar el archivo llamado 004_Quest_Data.rb en Plugins/MQS.
# Para hacer eso, haz clic derecho en el archivo y selecciona "Editar con Notepad++".
# Si no tienes Notepad++ instalado, te recomiendo encarecidamente que lo instales. El Bloc de Notas básico podría funcionar, pero no puedo garantizar que no afecte al formato.
# 
# El módulo QuestModule es donde necesitarás agregar manualmente información sobre tus misiones.
# He proporcionado una serie de ejemplos para que veas cómo formatear los datos de tu misión en 004_Quest_Data.rb.
# En general, debes especificar los siguientes datos para tus misiones:
# 1. ID number - un número, actualmente sin uso, pero que podría usarse para ordenar misiones en la interfaz de usuario (podría agregarlo más adelante)
# 2. Name - nombre de tu misión que aparecerá en la interfaz de usuario una vez que se active la misión
# 3. Quest giver - nombre del personaje que te hace entrega de la misión
# 4. Stage - breve descripción de la etapa actual de una misión determinada
# 5. Location - ubicación de la etapa actual de la misión
# 6. Quest description - descripción de la misión general
# 7. Reward string - Descripción de lo que el jugador puede ganar al completar la misión
# 
# Ninguno de estos es estrictamente obligatorio, pero de lo contrario la interfaz de usuario estará prácticamente en blanco.
# Una nota sobre la longitud del texto de estos campos: ¡Intenta ser conciso! De lo contrario, corre el riesgo de que el texto se corte o desborde los cuadros de texto.
# No hay límite en la cantidad de etapas que puede tener una misión.
# El número de ubicaciones de etapas especificadas no tiene por qué coincidir con el número de escenarios. Cualquier ubicación faltante o nula ("nil") se mostrará en la interfaz de usuario como "???".
# Hablando de información faltante, el otorgante de la misión y la cadena de recompensa también aparecerán como "???" si son nulos ("nil") o faltan.
# 
#===============================================================================
# ¿Algún problema?
#===============================================================================
# Si tiene problemas para que este sistema funcione, solicite ayuda en la sección de discusión de la publicación de recursos.
# Alternativamente, puedes enviarme un mensaje en Discord (ThatWelshOne_#3324).
# 